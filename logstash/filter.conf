# For SSL labs scans, the json output needs no modification before posting
# This will split into nested fields i.e: endpoints.details.heartbeat (true/false)
filter {
  if "ssl-labs" in [type] {
    json {
      source => "message"
    }
      split { 
        field => "[endpoints]"
      }
    # May add parsing for these fields later, the most valuable information is under endpoints split. 
    mutate {
       remove_field => "[endpoints][details][chain][certs]"
       remove_field => "[endpoints][details][hstsPreloads]"
       remove_field => "[endpoints][details][sims][results]"
       remove_field => "[endpoints][details][suites][list]"
     }
  }
}

# For SSlyze scans, the json format needs to be lightly sanitized before posting
# This will split into nested fields i.e: sslyze.tlsv1.preferred_cipher.key_size (2048 etc)
filter {
  if "sslyze" in [type] {
    json {
        source => "raw_message"
      }
      split {
        field => "[accepted_targets]"
        target => "sslyze"
      }
      mutate {
        rename => { "[sslyze][commands_results]" => "[sslyze]" }
        remove_field => "[accepted_targets]"
      }
    # Currently the hide-rejected ciphers argument isn't working in SSLyze, so we cleanup those fields.
    if "[sslyze][tlsv1][rejected_cipher_list]" {
      mutate {
        remove_field => "[sslyze][tlsv1][rejected_cipher_list]"
      }
    }
    if "[sslyze][tlsv1_1][rejected_cipher_list]" {
      mutate {
        remove_field => "[sslyze][tlsv1_1][rejected_cipher_list]"
      }
    }
    if "[sslyze][tlsv1_2][rejected_cipher_list]" {
      mutate {
        remove_field => "[sslyze][tlsv1_2][rejected_cipher_list]"
      }
    }
    if "[sslyze][sslv2][rejected_cipher_list]" {
      mutate {
        remove_field => "[sslyze][sslv2][rejected_cipher_list]"
      }
    }
    if "[sslyze][sslv3][rejected_cipher_list]" {
      mutate {
        remove_field => "[sslyze][sslv3][rejected_cipher_list]"
      }
    }
  }
}



